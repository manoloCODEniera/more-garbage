
import java.util.*;




public class Test_141 {

  static int stringIndex = 0;
  
  static ArrayList<String> functionNames = new ArrayList<String>();
  
  // add static array lists for function names, and variable names as parameters/ arguements
  // each function should have its own array of argument/ parameter names

  public static void main(String[] args) { 
    
    
    String test1 = "    int   square(int)  ;";
    
    String xd ="char";
    
    String test7 = "int ";
    
    String test2 = "char hello(int);";
    
    String test3 = "void hello(int);";
    
    String test4 = "float hello(int);";
    
    String test5 = "double hello(int);";
      
    String test6 = " int   squareint (int k, int )  , circle(int  radius  , char doink),box( int), cake(int,int )  ;" ;
    
    String test9 = "int circle(int  radius  , char doink  );";
   
    boolean tester;
    
 //   tester = isFuncDec(test1);
 //   tester = isFuncDec(test2);
 //   tester = isFuncDec(test3);
 //   tester = isFuncDec(test4);
 //   tester = isFuncDec(test5);
    
           tester = isFuncDec(test6);

// tester = isValidFuncName("2whop");
 //    tester = isDataType(xd,0,2);
//    System.out.println(tester);
    //System.out.println(hey);
    
    return;
  }
  
//  SAMPLES THAT SHOULD WORK
  
//  int square(int);
//  int    square (int);
//  void display();
//  void compute(void);
//  int magic(void k);
//  void delete(int);
//  void    delete (   int    );
//  int power(int,int);
//  char toLower (char);
//  char toLower (char), tryAgain();  
//  double squareRoot(float);
//  int gcd(int,int), lcm(int,int);
//  int isPrime(int n), isNotPrime(int);
//  char _isOkay_1();
//  int   bob(),marley();
  
  
// SAMPLES THAT SHOULD NOT WORK
  
//  int    square (int), ssds;
// char toLowser (char,);
// char toLowser (char,  );
// char toLowser (char,s);
// squareint (int k, int   )   , circle(int    radius),box(  int), cake(int,int)  ;
// lcm(int factor,int factor);
//  int gcd(int,int), gcd(int,int);
// int kek((char));
//  Int kek();
//  ints kek();
//  int dingo(ints);
//  int snake(int());
//  int space burrito();
//  char bag(int bag)int pupper; ( no comma and having int again)
//  int int keepo(int int);
//  void faceless(hello);
//  void chicken(int void);
//  void chicken;(int; vo;d);
//  int gre(en)(int chicken);
//  char (jail);
//  char (in t jail);
//  char astronaut)char x(;
//  int what(int(int));
//  char where(int));
//  char nobody;

  
// for(char xd : codestring){
//   System.out.print(xd);
// }  
  
//  PROCEDURE
//   1. USE .TRIM() TO REMOVE LEADING AND TRAILING WHITESPACES
//  
//   2. CHECK IF RETURN TYPE IS VALID (X use startswith ?) (X THEN MAYBE SPLIT THE STRING?,
//                                     after split, use is empty, add to another str array if false?)                                                                                     )
//     
//     2.1 THERE SHOULD BE A SPACE BETWEEN RETURN TYPE AND FUNC NAME, if char is not space return false, otherwise trim x nope
//     
//   3. // DONT MID THIS SHIfT, REDUNDANT  CHECK AGAIN THAT THE FUNCTION NAME IS NOT A PRIMITIVE DATA TYPE
  
//   create arraylist of func names, empty for now
//    4. loop ( while ( idk condition yet)  maybe while(true) or while(stringIndex != str.length()?
//            
//            4.1 get funcname, check if its ok
//                   ok checklist:
//                      1. not a data type
//                      2. not already declared
//                      3. starts with letter or '_', only alphanumeric characters
//                if ok, add to arraylist of func names, 
//             
//                create array list of its arguements
//             
//               if followed by space, if it is
//                      1.traverse by loop and adjust string index accordingly until it finds a character not space
//                        check what character is, return false if not (
//                                                                      
//            4.2 get arguements,check if they are ok
//                   if followed by space, if it is
//                      1.traverse by loop and adjust string index accordingly until it finds a character not space
//                        check if its a data type or closing parenthesis, return false if not
//                                                                        
//                                                                        
//                    if followed by space, if it is
//                      1.traverse by loop and adjust string index accordingly until it finds a character not space
//                        return false if datatype. return false if data type was void and character isnt ')' or ','
  //                                ACTUALLY VOID CAN HAVE A NAME WTF BUT IF VOID THEN ONLY THAT SHOULD BE ARGUEMENT
//                                                                        
//                    get parameter name, check if already in arraylist, if found return false, else add to arraylist
//                                                                        
//                    if followed by space, if it is
//                      1.traverse by loop and adjust string index accordingly until it finds a character not space
//                        return false if character isnt ')' or ','
//                                                                        
//                  if character is ',' 
//                                                                        
//                    back to 4.2 but it should return false if it finds ')' after ','
//                  
//                  if character is ')'
//                    
//                     check for space and comma and semi colon, if comma back to 4.1, if semi colon return true
                                                   
                                                                        
                                                                        
// RULES
//  A DATATYPE CAN ONLY BE FOLLOWED BY A SPACE, A COMMA OR A CLOSING PARENTHESIS ')'
//  AN OPENING PARENTHESIS CAN ONLY BE FOLLOWED BY A SPACE OR A DATATYPE OR A CLOSING PARENTHESIS;
//  A CLOSING PARENTHESIS CAN ONLY BE FOLLOWED BY A COMMA OR A SEMICOLON OR A SPACEBAR
// A COMMA CAN ONLY BE FOLLOWED BY A SPACE, A DATA TYPE, OR A FUNCTION NAME
  
  static boolean isFuncDec(String bob ){
  
    stringIndex = 0;
    
    bob = bob.trim();
    //System.out.print(bob);
   
    boolean continueFlag = true;
    
    continueFlag = isDataType(bob, stringIndex, 1);
    
    if(!continueFlag)
      return false;
    
    // at this point return type is valid
    
    while(true){
     
      String funcName;
      
     
      chewSpace(bob);      
      
      continueFlag = hasOpeningParenthesis(bob);
    
      if(!continueFlag)
        return false;
      
      funcName = getFuncName(bob);
      
      continueFlag = isValidFuncName(funcName);
      
        
      if(!continueFlag)
        return false;
      
      // System.out.println(funcName);
      
      functionNames.add(funcName);
      
      stringIndex += funcName.length();

      chewSpace(bob);

      stringIndex++;
      
      chewSpace(bob);

      // at this point function name is valid, and stringIndex points to first character after (
      
      String parameters;
      
      ArrayList<String> parameterList = new ArrayList<String>();
      
      continueFlag = hasClosingParenthesis(bob);
    
      if(!continueFlag)
        return false;
 
      parameters = getParameters(bob);
      
     // for (String parameter: parameters.split(",")) {
     //    
     //    System.out.println(parameter);
     // }
      
      //System.out.println(parameters);
      
      stringIndex += parameters.length();

      chewSpace(bob);
 
      // at this point stringIndex points to (
      
      stringIndex++;
      
      chewSpace(bob);
      
      
      //System.out.println(bob.charAt(stringIndex));
      
      // at this point stringIndex should point to next character after '(', expects comma or semicolon
      if(bob.charAt(stringIndex) == ';')
        return true;
      
      else if(bob.charAt(stringIndex) != ','){ 
        return false;
        stringIndex = 0;
      }
      stringIndex++;

    }
  }
  
  //CHECKS if int, char, double, float or void, then moves stringIndex to index after type
  
  //TODO - maybe add another parameter to what to check
  
  static boolean isDataType(String codeString, int index, int mode){
    
    if(mode == 1){
      
      
      if( codeString.indexOf("int ", index) == index){
        stringIndex += 4;
        return true;
      }

      if( codeString.indexOf("char ", index) == index){
        stringIndex += 5;
        return true;
      }

      if( codeString.indexOf("void ", index) == index){
        stringIndex += 5;
        return true;    
      }

      if( codeString.indexOf("float ", index) == index){
        stringIndex += 6;
        return true;    
      }

      if( codeString.indexOf("double ", index) == index){
        stringIndex += 7;
        return true;  
      }
    }
    
    else if(mode == 2){
            
      return   (codeString.equals("int")
             || codeString.equals("char")
             || codeString.equals("double")
             || codeString.equals("float")
             || codeString.equals("void")
                );

    }
    
    else if(mode == 3){
      return true;
    }
    return false;
  }
  
  
  static void chewSpace(String s){
  
    while(s.charAt(stringIndex) == ' '){
      stringIndex++;
    }
  }
  
  static boolean hasOpeningParenthesis(String codeString){
  
    int firstOccurence = codeString.indexOf('(', stringIndex);
  
    if(firstOccurence == -1)
      return false;
  
    return true;  
  }
  
  
  static boolean hasClosingParenthesis(String codeString){
  
    int firstOccurence = codeString.indexOf(')', stringIndex);
  
    if(firstOccurence == -1)
      return false;
  
    return true;  
  }  
  
  static String getFuncName(String codeString){
  
    int firstOccurence = codeString.indexOf('(', stringIndex);
  
    String funcName = codeString.substring(stringIndex, firstOccurence);
  
  
    return funcName.trim();  
  }
  
  
  static boolean isValidFuncName(String codeString){
    
    if( isDataType(codeString, 0, 2))
      return false;
    
    if(functionNames.contains(codeString))
      return false;
    
    char[] func = codeString.toCharArray();

    for (char c : func) {
        if(!Character.isLetterOrDigit(c) && c != '_')
        {
            return false;
        }
    }
    
    if(Character.isDigit(func[0]))
         return false;
      
    return true;
  }

    static boolean isValidParameters(String codeString){
      
    
      return true;
  }
  
  static String getParameters(String codeString){
  
    int firstOccurence = codeString.indexOf(')', stringIndex);
  
    String parameters = codeString.substring(stringIndex, firstOccurence);
  
  
    return parameters.trim();  
  }
}
